version: 0.2

cache:
  paths:
    - /root/terraform_cache/**/*
    - /root/.ansible_cache/**/*

phases:
  install:
    commands:
      - echo "🔽 Downloading prebuilt build_env from S3..."
      - aws s3 cp s3://splunk-deployment-test/toolkits/build_env.tar.gz /tmp/build_env.tar.gz
      - mkdir -p /opt/build_env
      - tar -xzf /tmp/build_env.tar.gz -C /opt/build_env
      - export PATH=$PATH:/opt/build_env/terraform:/opt/build_env/bin
      - terraform --version
      - ansible --version
      - pip3 install boto3

  pre_build:
    commands:
      - echo "📥 Downloading dynamic tfvars from S3..."
      - aws s3 cp s3://splunk-deployment-test/$TFVARS_S3_KEY terraform.tfvars
      - echo "✅ Pre-build phase complete."

  build:
    commands:
      - terraform init
      - chmod +x scripts/check_key.sh
      
      - echo "🔐 Running locking script to avoid duplicate key creation..."
      - chmod +x scripts/pre_terraform_lock.py
      - export TF_VAR_usermail=$(grep 'usermail' terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
      - export TF_VAR_key_name=$(grep 'key_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
      - export TF_VAR_aws_region=$(grep 'aws_region' terraform.tfvars | cut -d '=' -f2 | tr -d ' "' | tr -d '\r\n')
      - python3 scripts/pre_terraform_lock.py

      - terraform apply -auto-approve

      - echo "🧹 Removing lock after Terraform apply..."
      - aws s3 rm s3://splunk-deployment-test/clients/$TF_VAR_usermail/key-lock.json --region $TF_VAR_aws_region
      
      - echo "✅ Build phase complete."
      - export INSTANCE_ID=$(terraform output -raw instance_id)
      - echo $INSTANCE_ID > instance_id.txt
      - echo "📦 Running Ansible Playbook..."
      - ansible-playbook -i inventory.ini main.yml

  post_build:
    commands:
      - echo "✅ EC2 Splunk + Ansible Deployment Completed Successfully!"
      - chmod +x scripts/stop_instance.sh
      - ./scripts/stop_instance.sh $(cat instance_id.txt)
